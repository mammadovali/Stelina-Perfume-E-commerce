@model BlogPostItemsViewModel

@{
    ViewData["Title"] = "Details";

    IEnumerable<BlogPostComment> GetComments(BlogPostComment parent)
    {
        if (parent.ParentId != null)
            yield return parent;

        foreach (var item in parent.Children.SelectMany(c => GetComments(c)))
        {
            yield return item;
        }

    }
}

<div class="main-content main-content-blog single right-sidebar" style="padding-bottom: 0px;">
    <div class="container">
        <div class="row">
            <div class="col-lg-12">
                <div class="breadcrumb-trail breadcrumbs">
                    <ul class="trail-items breadcrumb">
                        <li class="trail-item trail-begin">
                            <a asp-controller="home" asp-action="index">Home</a>
                        </li>
                        <li class="trail-item">
                            <a asp-action="index" asp-controller="blog">Our blog</a>
                        </li>
                        <li class="trail-item trail-end active">
                            @Model.BlogPost.Title
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="content-area content-blog col-lg-9 col-md-8 col-sm-12 col-xs-12">
                <div class="site-main">
                    <div class="post-item">
                        <div class="post-format">
                            <img src="~/uploads/images/@Model.BlogPost.ImagePath" alt="blog-image" style="height: 511px; object-fit: contain; width: 100%" />
                        </div>

                        @if (User.Identity.IsAuthenticated)
                        {
                            <input type="hidden" data-user-id="@User.GetCurrentUserId()" data-blogpost-id="@Model.BlogPost.Id" />
                            <button class="like-button dark @(Model.BlogPostLikes.Any(bpl => bpl.BlogPostId == Model.BlogPost.Id && bpl.CreatedByUserId == User.GetCurrentUserId()) ? "liked" : " ")">
                                <div class="hand">
                                    <div class="thumb"></div>
                                </div>
                                <span>Like<span>d</span></span>
                            </button>
                        }

                            
                        

                        <div class="post-infor">
                            <div class="category-blog">
                                <a>Category: @Model.BlogPost.Category?.Name</a>
                            </div>

                            <ul class="blog-post-data">
                                <li class="post-date">
                                    Post date:<a>@Model.BlogPost.PublishedDate?.ToString("dd MMM, yyyy")</a>
                                </li>
                                <li class="post-view">
                                    <span class="fa fa-heart" style="padding-right: 5px;"></span>@Model.BlogPost.Likes.Count Likes
                                </li>
                                <li class="post-comments">
                                    <span><i class="fa fa-comment"></i></span><span class="px-1"></span> @Model.BlogPost.Comments.Count Comments
                                </li>
                            </ul>


                            <h3 class="post-title">
                                <a>@Model.BlogPost.Title</a>
                            </h3>
                            <div class="main-info-post">
                                @Html.Raw(Model.BlogPost.Body)
                            </div>
                        </div>
                    </div>
                    @await Component.InvokeAsync("RelatedPosts", new {id = @Model.BlogPost.Id})

                    <div class="tags tags-blog">
                        <h3 class="widgettitle">Tags:</h3>
                        <ul class="tagcloud">
                            @foreach (var item in Model.BlogPost.TagCloud)
                            {
                                <li class="tag-cloud-link">
                                    <a>@item.Tag.Text</a>
                                </li>
                            }

                        </ul>
                    </div>
                    <div class="comments-area">
                        <ul class="comment-list">
                            <li class="comment">
                                @foreach (var comment in Model.BlogPost.Comments.Where(c => c.ParentId == null))
                                {
                                    <div class="comment-item" id="c-@comment.Id" data-comment-id="@comment.Id">
                                        <div class="author-view">
                                            <div class="author">
                                                <h3 class="name">@($"{comment.CreatedByUser?.Name} {comment.CreatedByUser?.Surname}")</h3>
                                            </div>
                                            <div class="date-reply-comment">
                                                <span class="date-comment">@comment.CreatedDate.ToString("dd.MM.yyyy")</span>
                                            </div>
                                        </div>
                                        <div class="comment-body">
                                            <div class="comment-content">
                                                <p>
                                                    @comment.Text
                                                </p>
                                            </div>
                                            <div class="comment-reply-link">
                                                <a class="Comment btn-comment-reply">
                                                    <i class="icon fa fa-commenting"
                                                   aria-hidden="true"></i>
                                                    Reply
                                                </a>
                                            </div>
                                        </div>
                                    </div>

                                    @foreach (var subComment in GetComments(comment))
                                    {
                                        <ul class="children">
                                            <li>
                                                <div class="comment-item" id="c-@subComment.Id" data-comment-id="@subComment.Id">
                                                    <div class="author-view">
                                                        <div class="author">
                                                            <h3 class="name">@($"{subComment.CreatedByUser?.Name} {subComment.CreatedByUser?.Surname}")</h3>
                                                        </div>
                                                        <div class="date-reply-comment">
                                                            <span class="date-comment"> @subComment.CreatedDate.ToString("dd.MM.yyyy") </span>
                                                        </div>
                                                    </div>
                                                    <div class="comment-body">
                                                        <div class="comment-content">
                                                            <p>
                                                                @subComment.Text
                                                            </p>
                                                        </div>
                                                        <div class="comment-reply-link">
                                                            <a class="Comment btn-comment-reply">
                                                                <i class="fa fa-commenting"
                                                           aria-hidden="true"></i>
                                                                Reply
                                                            </a>
                                                        </div>
                                                    </div>
                                                </div>
                                            </li>
                                        </ul>
                                    }
                                }
                            </li>
                        </ul>

                        <h3 class="custom_blog_title">
                            Comments <span class="count">(@Model.BlogPost.Comments.Count)</span>

                        </h3>
                        <div id="replyToComment"></div>
                        <form class="comment-form" method="post" id="replyForm">
                            <input type="hidden" name="postId" value="@Model.BlogPost.Id" />
                            <p class="comment-reply-content">
                                <textarea rows="6"
                                          name="comment"
                                          placeholder="Write your comment"
                                          id="comment-text"
                                          class="input-form"></textarea>
                            </p>
                            <p class="form-submit">
                                <span class="controll">
                                    <button type="submit" id="postComment" class="submit button">POST A COMMENT</button>
                                </span>
                            </p>
                        </form>
                    </div>
                </div>
            </div>
            <div class="sidebar sidebar-single-blog col-lg-3 col-md-4 col-sm-12 col-xs-12">
                <div class="wrapper-sidebar">
                    <div class="widget widget-socials">
                        <h3 class="widgettitle">Follow us</h3>
                        <div class="content-socials">
                            <div class="social-list">
                                <a href="#" target="_blank" class="social-item">
                                    <i class="fa fa-facebook-square" aria-hidden="true"></i>
                                </a>
                                <a href="#" target="_blank" class="social-item">
                                    <i class="fa fa-twitter" aria-hidden="true"></i>
                                </a>
                                <a href="#" target="_blank" class="social-item">
                                    <i class="fa fa-instagram" aria-hidden="true"></i>
                                </a>
                            </div>
                        </div>
                    </div>

                    @await Component.InvokeAsync("RecentPosts")

                    <partial name="_Subscribe" />

                </div>
            </div>
        </div>
    </div>
</div>



@section addjs{

<script src="~/lib/gsap/gsap.min.js"></script>

<script class="removable">
        $(document).ready(function(){
            $(".btn-comment-reply").click(function(e){
                e.preventDefault();

                $("#replyToComment").html("<a href='javascript:removeSelectedReply()' class='remove-selected-comment' >&times</a>").append($(e.currentTarget).closest(".comment-item").clone());
            })

            $("#replyForm").submit(function(e) {
                e.preventDefault();

                let formData = new FormData(e.currentTarget);

                let toCommentId = $(`#replyToComment .comment-item`).data("comment-id");


                if(toCommentId != undefined){
                    formData.set("commentId", toCommentId);
                }


                $.ajax({
                    url: `@Url.Action("PostComment", "Blog")`,
                    type: "POST",
                    data: formData,
                    contentType: false,
                    processData: false,
                    dataType: "json",
                    success: function(res){
                        //console.log(res);
                    },
                    error: function(res){

                        if(res.statusText == "parsererror"){
                            if(toCommentId != undefined){
                               $(res.responseText).insertAfter($(`#c-${toCommentId}`));

                               $("#replyToComment").html("");
                               e.currentTarget.reset();
                               $("#comment-text").val("");
                            }
                            else
                            {
                                $("div.comments-area ul").append($(res.responseText))
                                $("#comment-text").val("");
                            }
                        }

                    }
                });
            })



        })

        function removeSelectedReply(el) {
            $("#replyToComment").html("");
        }

        document.querySelectorAll('.like-button').forEach(button => {

        button.addEventListener('click', e => {
            button.classList.toggle('liked');
            if (button.classList.contains('liked')) {
                gsap.fromTo(button, {
                    '--hand-rotate': 8
                }, {
                    ease: 'none',
                    keyframes: [{
                        '--hand-rotate': -45,
                        duration: .16,
                        ease: 'none'
                    }, {
                        '--hand-rotate': 15,
                        duration: .12,
                        ease: 'none'
                    }, {
                        '--hand-rotate': 0,
                        duration: .2,
                        ease: 'none',
                        clearProps: true
                    }]
                });
            }
        })


        $(document).ready(function(){

            $(".like-button").click(function(e){
                e.preventDefault();

                let obj = $("input[data-blogpost-id][data-user-id]").data();

                obj.isLiked = $(".like-button").hasClass("liked");

                //console.log(obj);

                $.ajax({
                    url: `@Url.Action("LikeUnlikeBlogPost", "Blog")`,
                    type: "POST",
                    data: obj,
                    dataType: "json",
                    contentType: "application/x-www-form-urlencoded",
                    success: function(res){

                        if(res.error == false){
                           toastr.success(res.message, "Uğurlu");
                           return;
                        }
                        //console.log(res);
                    },
                    error: function(res){

                        if(res.error == true){
                           toastr.error(res.message, "Xəta");
                        }

                        //console.warn(res);
                    }
                })



            })



        })

    });
</script>


}

@section addcss{
<style>
    .like-button {
        --color: #1E2235;
        --color-hover: #1E2235;
        --color-active: #fff;
        --icon: #BBC1E1;
        --icon-hover: #8A91B4;
        --icon-active: #fff;
        --background: #fff;
        --background-hover: #fff;
        --background-active: #362A89;
        --border: #E1E6F9;
        --border-active: #362A89;
        --shadow: rgba(0, 17, 119, 0.025);
        display: block;
        outline: none;
        cursor: pointer;
        position: relative;
        border: 0;
        background: none;
        padding: 8px 20px 8px 24px;
        border-radius: 9px;
        line-height: 27px;
        font-family: inherit;
        font-weight: 600;
        font-size: 14px;
        color: var(--color);
        -webkit-appearance: none;
        -webkit-tap-highlight-color: transparent;
        transition: color .2s linear;
        margin-top: 20px;
    }

        .like-button.dark {
            --color: #F6F8FF;
            --color-hover: #F6F8FF;
            --color-active: #fff;
            --icon: #8A91B4;
            --icon-hover: #BBC1E1;
            --icon-active: #fff;
            --background: #1E2235;
            --background-hover: #171827;
            --background-active: #275EFE;
            --border: transparent;
            --border-active: transparent;
            --shadow: rgba(0, 17, 119, 0.16);
        }

        .like-button:hover {
            --icon: var(--icon-hover);
            --color: var(--color-hover);
            --background: var(--background-hover);
            --border-width: 2px;
        }

        .like-button:active {
            --scale: .95;
        }

        .like-button:not(.liked):hover {
            --hand-rotate: 8;
            --hand-thumb-1: -12deg;
            --hand-thumb-2: 36deg;
        }

        .like-button.liked {
            --span-x: 2px;
            --span-d-o: 1;
            --span-d-x: 0;
            --icon: var(--icon-active);
            --color: var(--color-active);
            --border: var(--border-active);
            --background: var(--background-active);
        }

        .like-button:before {
            content: '';
            min-width: 103px;
            position: absolute;
            left: 0;
            top: 0;
            right: 0;
            bottom: 0;
            border-radius: inherit;
            transition: background .2s linear, transform .2s, box-shadow .2s linear;
            transform: scale(var(--scale, 1)) translateZ(0);
            background: var(--background);
            box-shadow: inset 0 0 0 var(--border-width, 1px) var(--border), 0 4px 8px var(--shadow), 0 8px 20px var(--shadow);
        }

        .like-button .hand {
            width: 11px;
            height: 11px;
            border-radius: 2px 0 0 0;
            background: var(--icon);
            position: relative;
            margin: 10px 8px 0 0;
            transform-origin: -5px -1px;
            transition: transform .25s, background .2s linear;
            transform: rotate(calc(var(--hand-rotate, 0) * 1deg)) translateZ(0);
        }

            .like-button .hand:before, .button .hand:after {
                content: '';
                background: var(--icon);
                position: absolute;
                transition: background .2s linear, box-shadow .2s linear;
            }

            .like-button .hand:before {
                left: -5px;
                bottom: 0;
                height: 12px;
                width: 4px;
                border-radius: 1px 1px 0 1px;
            }

            .like-button .hand:after {
                right: -3px;
                top: 0;
                width: 4px;
                height: 4px;
                border-radius: 0 2px 2px 0;
                background: var(--icon);
                box-shadow: -0.5px 4px 0 var(--icon), -1px 8px 0 var(--icon), -1.5px 12px 0 var(--icon);
                transform: scaleY(0.6825);
                transform-origin: 0 0;
            }

            .like-button .hand .thumb {
                background: var(--icon);
                width: 10px;
                height: 4px;
                border-radius: 2px;
                transform-origin: 2px 2px;
                position: absolute;
                left: 0;
                top: 0;
                transition: transform .25s, background .2s linear;
                transform: scale(0.85) translateY(-0.5px) rotate(var(--hand-thumb-1, -45deg)) translateZ(0);
            }

                .like-button .hand .thumb:before {
                    content: '';
                    height: 4px;
                    width: 7px;
                    border-radius: 2px;
                    transform-origin: 2px 2px;
                    background: var(--icon);
                    position: absolute;
                    left: 7px;
                    top: 0;
                    transition: transform .25s, background .2s linear;
                    transform: rotate(var(--hand-thumb-2, -45deg)) translateZ(0);
                }

        .like-button .hand,
        .like-button span {
            display: inline-block;
            vertical-align: top;
        }

            .like-button .hand span,
            .like-button span span {
                opacity: var(--span-d-o, 0);
                transition: transform .25s, opacity .2s linear;
                transform: translateX(var(--span-d-x, 4px)) translateZ(0);
            }

        .like-button > span {
            transition: transform .25s;
            transform: translateX(var(--span-x, 4px)) translateZ(0);
        }

    body .dribbble {
        position: fixed;
        display: block;
        right: 20px;
        bottom: 20px;
    }

        body .dribbble img {
            display: block;
            height: 28px;
        }

    body .twitter {
        position: fixed;
        display: block;
        right: 64px;
        bottom: 14px;
    }

        body .twitter svg {
            width: 32px;
            height: 32px;
            fill: #1da1f2;
        }

</style>
}
